pipeline {
  agent { label 'AGENT-01' }

  environment {
    AWS_DEFAULT_REGION = 'eu-west-1'
  }

  tools {
    terraform 'terraform50708'
  }

  stages {
    stage('Checkout Code') {
      steps {
        checkout scm
      }
    }

    // Check the correct PR branch creation
    stage('Validate PR Rules') {
      when {
        changeRequest()
      }
      steps {
        script {
          echo "Validating PR: ${env.CHANGE_BRANCH} → ${env.CHANGE_TARGET}"

          if (env.CHANGE_BRANCH ==~ /^feature\/.*/ && env.CHANGE_TARGET != 'develop') {
            error "Không được phép merge feature/* vào ${env.CHANGE_TARGET}"
          }

          if (env.CHANGE_BRANCH == 'develop' && env.CHANGE_TARGET != 'staging') {
            error "Không được phép merge develop vào ${env.CHANGE_TARGET}"
          }

          if (env.CHANGE_BRANCH == 'staging' && env.CHANGE_TARGET != 'main') {
            error "Không được phép merge staging vào ${env.CHANGE_TARGET}"
          }
        }
      }
    }

    stage('Terraform Init') {
      when {
        anyOf {
          // Build khi push trực tiếp lên feature/* hoặc merge vào develop, staging, main
          allOf {
            not { changeRequest() }
            expression { env.BRANCH_NAME ==~ /^feature\/.*/ || ['develop', 'staging', 'main', /^feature\/.*/].contains(env.BRANCH_NAME) }
            changeset ".infrastructure/**"
          }

          // Build lần đầu PR hoặc có thay đổi trong .infrastructure
          allOf {
            changeRequest()
            expression {
              (env.CHANGE_BRANCH ==~ /^feature\/.*/ && env.CHANGE_TARGET == 'develop') ||
              (env.CHANGE_BRANCH == 'develop' && env.CHANGE_TARGET == 'staging') ||
              (env.CHANGE_BRANCH == 'staging' && env.CHANGE_TARGET == 'main')
            }
            anyOf {
              // push lại lên PR cũ
              changeset ".infrastructure/**"
              // build lần đầu một PR 
              allOf {
                not { changeset ".infrastructure/**" }
                expression { currentBuild.changeSets.size() == 0 }
              }
            }
          }
        }
      }
      steps {
        dir('.infrastructure') {
          withCredentials([
            usernamePassword(
              credentialsId: 'aws-creds',
              usernameVariable: 'AWS_ACCESS_KEY_ID',
              passwordVariable: 'AWS_SECRET_ACCESS_KEY'
            )
          ]) {
            sh 'terraform init -input=false'
          }
        }
      }
    }

    stage('Terraform Format and Validate') {
      steps {
        dir('.infrastructure') {
          sh 'terraform fmt'
          sh 'terraform validate -no-color'
        }
      }
    }

    stage('Terraform Plan') {
      when {
        anyOf {
          // Build khi push trực tiếp lên feature/* hoặc merge vào develop, staging, main
          allOf {
            not { changeRequest() }
            expression { env.BRANCH_NAME ==~ /^feature\/.*/ || ['develop', 'staging', 'main', /^feature\/.*/].contains(env.BRANCH_NAME) }
            changeset ".infrastructure/**"
          }

          // Build lần đầu PR hoặc có thay đổi trong .infrastructure
          allOf {
            changeRequest()
            expression {
              (env.CHANGE_BRANCH ==~ /^feature\/.*/ && env.CHANGE_TARGET == 'develop') ||
              (env.CHANGE_BRANCH == 'develop' && env.CHANGE_TARGET == 'staging') ||
              (env.CHANGE_BRANCH == 'staging' && env.CHANGE_TARGET == 'main')
            }
            anyOf {
              // push lại lên PR cũ
              changeset ".infrastructure/**"
              // build lần đầu một PR 
              allOf {
                not { changeset ".infrastructure/**" }
                expression { currentBuild.changeSets.size() == 0 }
              }
            }
          }
        }
      }
      steps {
        dir('.infrastructure') {
          withCredentials([
            usernamePassword(
              credentialsId: 'aws-creds',
              usernameVariable: 'AWS_ACCESS_KEY_ID',
              passwordVariable: 'AWS_SECRET_ACCESS_KEY'
            )
          ]) {
            sh 'terraform plan -no-color -input=false'
          }
        }
      }
    }

    stage('Manual Approval') {
      when {
        allOf {
          not { changeRequest() }
          expression {
            env.BRANCH_NAME == 'main'
          }
        }
      }
      steps {
        timeout(time: 1, unit: 'HOURS') {
          input message: 'Apply changes?'
        }
      }
    }

    stage('Terraform Apply') {
      when {
        allOf {
          not { changeRequest() }
          expression {
            env.BRANCH_NAME == 'main'
          }
        }
      }
      steps {
        dir('.infrastructure') {
          withCredentials([
            usernamePassword(
              credentialsId: 'aws-creds',
              usernameVariable: 'AWS_ACCESS_KEY_ID',
              passwordVariable: 'AWS_SECRET_ACCESS_KEY'
            )
          ]) {
            sh 'terraform apply --auto-approve'
          }
        }
      }
    }

    stage('Terraform Destroy') {
      when {
        allOf {
          not { changeRequest() }
          expression {
            env.BRANCH_NAME == 'main'
          }
        }
      }
      steps {
        dir('.infrastructure') {
          withCredentials([
            usernamePassword(
              credentialsId: 'aws-creds',
              usernameVariable: 'AWS_ACCESS_KEY_ID',
              passwordVariable: 'AWS_SECRET_ACCESS_KEY'
            )
          ]) {
            script {
              try {
                timeout(time: 1, unit: 'HOURS') {
                  input message: "Xác nhận destroy IaC?"
                }
                sh 'terraform destroy --auto-approve'
              } catch (e) {
                echo "Destroy bị từ chối hoặc hết thời gian"
              }
            }
            
          }
        }
      }
    }
  }
}
